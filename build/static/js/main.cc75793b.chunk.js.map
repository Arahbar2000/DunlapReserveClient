{"version":3,"sources":["Components/tennis_court_image.jpg","helpers/timeHelper.js","Components/AddPlayer.js","config.js","helpers/courtHelpers.js","Components/Court.js","helpers/bookHelper.js","helpers/userHelpers.js","Components/Scheduler.js","Components/Error.js","Components/Navbar.js","Components/App.js","serviceWorker.js","context/googleProvider.js","index.js"],"names":["module","exports","roundTime","date","newDate","Date","getMinutes","setHours","getHours","setTime","getTime","dateToInterval","roundedDate","intervalArray","start","end","Error","intervals","Array","i","length","AddPlayer","props","useState","minStartDate","minStartTime","getDate","maxStartTime","maxStartDate","setDate","getTimes","booked","onClick","unbook","selected","book","API_URL","GOOGLE_CLIENT_ID","getCourtState","court","Promise","resolve","reject","axios","url","method","headers","data","then","res","catch","error","React","memo","useAuth0","getAccessTokenSilently","isAuthenticated","player","setPlayer","useEffect","a","empty","user","displayName","console","log","fetchCourt","className","src","tennisCourt","alt","bookCourt","access_token","localStorage","getItem","unbookCourt","getUserProfile","token","Scheduler","calendar","createRef","setSelected","selection","setSelection","resources","push","id","title","handleSelect","resource","startInterval","endInterval","current","getApi","refetchEvents","ref","plugins","resourceTimeGridPlugin","interactionPlugin","initialView","events","editable","eventOverlap","selectable","select","allDaySlot","slotMinTime","slotMaxTime","eventDidMount","info","event","themeSystem","Component","Navbar","setAuth","signUp","signin","response","login","signOut","signout","to","key","App","setBooked","useGoogleLogin","clientId","onSuccess","setItem","wc","googleId","onFailure","removeItem","isSignedIn","signIn","loaded","useGoogleLogout","booking","exact","path","component","Boolean","window","location","hostname","match","createContext","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cc75793b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tennis_court_image.19fc2658.jpg\";","export const getTimes = (start) => {\n    const minStartDate = new Date()\n    let minStartTime = new Date()\n    if(start.getDate() > minStartDate.getDate()) {\n        minStartTime.setTime(start.getTime())\n        minStartTime.setHours(7, 0, 0, 0)\n    }\n    let maxStartTime = new Date(start.getTime())\n    maxStartTime.setHours(22, 0, 0, 0)\n    const maxStartDate = new Date()\n    maxStartDate.setDate(minStartDate.getDate() + 1)\n\n    return [minStartDate, maxStartDate, minStartTime, maxStartTime]\n}\n\nexport const roundTime = date => {\n    const newDate = new Date()\n    if (date.getMinutes() <= 30 && date.getMinutes() > 0) {\n        newDate.setHours(date.getHours(), 30, 0, 0)\n    }\n    else if (date.getMinutes() > 30) {\n        newDate.setHours(date.getHours() + 1, 0, 0, 0)\n    }\n    else {\n        newDate.setTime(date.getTime())\n    }\n    return newDate\n}\n\nexport const dateToInterval = date => {\n    const roundedDate = roundTime(date)\n    const hours = roundedDate.getHours()\n    const minutes = roundedDate.getMinutes()\n    return (2 * hours) + (minutes / 30)\n\n}\n\nexport const intervalToDate = interval => {\n    const date = new Date()\n    date.setHours(Math.floor(interval/2), 0, 0, 0)\n    if(interval % 2) date.setMinutes(30)\n    return date\n}\n\nexport const intervalArray = (start, end) => {\n    if(start > end) {\n        throw Error('start must be <= end')\n    }\n    let intervals = new Array(end-start+1)\n    for(let i = 0; i < intervals.length; i++, start++) {\n        intervals[i] = start\n    }\n    return intervals\n}","import React, {useState} from 'react'\nimport DatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './AddPlayer.css'\nimport { getTimes, roundTime, dateToInterval, intervalArray } from '../helpers/timeHelper'\n\n// Form for booking or unbooking a court\nfunction AddPlayer(props) {\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n        const endTime  = getEnd(start, length.value)\n        const intervals = intervalArray(dateToInterval(start), dateToInterval(endTime))\n        const formData = {\n            court: courtNumber.valueAsNumber,\n            date: start.getDate(),\n            intervals\n        }\n        props.book(formData)\n    }\n    const [start, setStart] = useState(roundTime(new Date()))\n    const [minStartDate, maxStartDate, minStartTime, maxStartTime] = getTimes(start)\n    let courtNumber = 0;\n    let length = 0;\n\n    const success = (data) => {\n        console.log(data)\n    }\n\n    const failure = data => {\n        console.log(data)\n    }\n\n\n    return (\n        <div>\n            {!props.booked ?  props.selected ? <button onClick={props.book}>Book?</button> : null :\n            <button onClick={() => props.unbook()}>Unbook court</button>}\n        </div>\n    )\n}\n\nfunction getEnd(start, hours) {\n    return new Date(start.getTime() + (hours*60*60000))\n}\n\nexport default AddPlayer","export const API_URL = 'http://localhost:5000'\nexport const GOOGLE_CLIENT_ID = '219554201012-e9v8ib95o9c5akujcvg1i9lrnu0bnuao.apps.googleusercontent.com'\n","import axios from 'axios'\nimport { API_URL } from '../config'\n\nexport const getCourtState = (court) => {\n    return new Promise((resolve, reject) => {\n        axios({\n            url: API_URL + '/court',\n            method: 'POST',\n            headers: {'content-type': 'application/json'},\n            data: {court}\n        })\n        .then(res => resolve(res.data))\n        .catch(error => reject(error))\n    })\n}","import React, {useState, useEffect} from 'react'\nimport { useAuth0 } from \"@auth0/auth0-react\"\nimport { getCourtState } from '../helpers/courtHelpers'\nimport tennisCourt from './tennis_court_image.jpg'\nimport './Court.css'\n\n// Component that handles a single court\nfunction Court(props) {\n    const { getAccessTokenSilently, isAuthenticated } = useAuth0()\n    const [player, setPlayer] = useState('Empty')\n    // If user clicks on a court and user has not booked a court, allow user to select a court\n    // border of court turns blue when court is selected by user\n\n    useEffect(() => {\n        const fetchCourt = async () => {\n            getCourtState(props.court)\n            .then(data => {\n                if(!data.empty) {\n                    setPlayer(data.user.displayName)\n                }\n            })\n            .catch(error => console.log(`error getting court ${props.court} data`, error))\n        }\n        // fetch latest court data\n        fetchCourt()\n\n    }, [isAuthenticated, props.court, getAccessTokenSilently])\n    \n    return (\n        <div className=\"col\">\n            <h4>Court {player}</h4>\n            <img src={tennisCourt} alt='tennis court' />\n        </div>\n    )\n}\n\nexport default React.memo(Court)","import axios from 'axios'\nimport {API_URL} from '../config'\n\nexport const bookCourt = (data) => {\n    data.access_token = localStorage.getItem('token')\n    console.log(data)\n    return new Promise((resolve, reject) => {\n        axios({\n            url: API_URL + '/book',\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            data\n        })\n        .then(res => resolve(res.data.user))\n        .catch(error => reject(error))\n    })\n}\n\nexport const unbookCourt = () => {\n    const access_token = localStorage.getItem('token')\n    return new Promise((resolve, reject) => {\n        axios({\n            url: API_URL + '/unbook',\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            data: {access_token}\n        })\n        .then(res => resolve(res.data.user))\n        .catch(error => reject(error))\n    })\n}","import axios from 'axios'\nimport {API_URL} from '../config'\nexport const signup = () => {\n    return new Promise((resolve, reject) => {\n        console.log(localStorage.getItem('token'))\n        axios({\n            url: API_URL + '/signup',\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            data: {access_token: localStorage.getItem('token')}\n        }).catch(error => {\n            console.log(error.response)\n            return reject(error)\n        })\n        return resolve()\n    })\n}\n\nexport const getUserProfile = () => {\n    const token = localStorage.getItem('token')\n    console.log(token)\n    return new Promise((resolve, reject) => {\n        axios({\n            url: API_URL +'/userProfile',\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            data: {access_token: token}\n        }).then(res => {\n            return resolve(res.data.user)\n        }).catch(error => {\n            return reject(error)\n        })\n    })\n}","import React, {useEffect, useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport {useAuth0} from \"@auth0/auth0-react\"\nimport FullCalendar, { CalendarDataManager } from '@fullcalendar/react'\nimport resourceTimeGridPlugin from '@fullcalendar/resource-timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport {dateToInterval, intervalArray} from '../helpers/timeHelper'\nimport {bookCourt, unbookCourt} from '../helpers/bookHelper'\nimport AddPlayer from './AddPlayer'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Popover from 'react-bootstrap/Popover'\nimport EventPopover from './EventPopover'\n\nconst Scheduler = (props) => {\n    const calendar = React.createRef()\n    const [selected, setSelected] = useState(false)\n    const [selection, setSelection] = useState({})\n    let resources = []\n    for(let i = 1; i <= 9; i++) {\n        resources.push({id: i, title: `Court ${i}`})\n    }\n\n    const handleSelect = async ({start, end, resource}) => {\n        const court = resource.id\n        const startInterval = dateToInterval(start)\n        const endInterval = dateToInterval(end)\n        const intervals = intervalArray(startInterval, endInterval)\n        const date = start.getDate()\n        setSelected(true)\n        setSelection({date, court, intervals})\n    }\n\n    const book = async () => {\n        await props.book(selection)\n        calendar.current.getApi().refetchEvents()\n    }\n\n    const unbook = async () => {\n        await props.unbook()\n        calendar.current.getApi().refetchEvents()\n    }\n\n\n    const eventMount = (info) => {\n          if(info.event.id != localStorage.getItem('id')) {\n              info.event.editable = false\n          }\n          else {\n              info.event.editable = true\n          }\n    }\n     return (\n        <div>\n        <AddPlayer\n            unbook={unbook}\n            booked={props.booked}\n            book={book}\n            selected={selected}\n            selection={selection}\n        />\n        <FullCalendar\n            ref={calendar}\n            plugins={[ resourceTimeGridPlugin, interactionPlugin ]}\n            initialView={'resourceTimeGridDay'}\n            resources={resources}\n            events={'http://localhost:5000/events'}\n            editable\n            eventOverlap={false}\n            selectable\n            select={handleSelect}\n            allDaySlot={false}\n            slotMinTime={\"06:00:00\"}\n            slotMaxTime={\"22:00:00\"}\n            eventDidMount={eventMount}\n            themeSystem={'bootstrap'}\n        />\n        </div>\n    )\n}\n\nexport default Scheduler","import React from 'react'\n\nclass Error extends React.Component {\n    render() {\n        return (\n            <h2>404: Not Found</h2>\n        )\n    }\n}\n\nexport default Error","import React, { useState, useEffect } from 'react'\nimport {Link} from 'react-router-dom'\nimport './Navbar.css'\nimport { useAuth0 } from \"@auth0/auth0-react\"\nimport {signup} from '../helpers/userHelpers'\nimport axios from 'axios'\nimport { userInfo } from 'os'\n\nconst Navbar = (props) => {\n    const [isAuthenticated, setAuth] = useState(false)\n    useEffect(() => {\n        if(localStorage.getItem('token') != null) {\n            setAuth(true)\n        }\n        else {\n            setAuth(false)\n        }\n    }, [])\n    const signUp = async () => {\n        await props.signin()\n        signup()\n    }\n\n    const login = async () => {\n        await props.signin()\n    }\n\n    const signOut = async () => {\n        await props.signout()\n        setAuth(false)\n    }\n\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <Link className='navbar-brand' to='/'>Home</Link>\n            <div className=\"collapse navbar-collapse\">\n                <ul className=\"nav navbar-nav ml-auto\">\n                    {!isAuthenticated ? \n                    [<li className=\"nav-item\" key=\"login\">\n                    <Link className='nav-link' to='' onClick={login} >Login</Link>\n                    </li>,\n                    <li className=\"nav-item\" key=\"signup\">\n                        <Link className='nav-link' to='' onClick={signUp}>Sign Up</Link>\n                    </li>] : \n                    <li className=\"nav-item\">\n                        <Link to='' className='nav-link' onClick={signOut}>Logout</Link>\n                    </li>}\n                </ul>\n            </div>\n      </nav>\n    )\n}\n\nexport default Navbar","import React, { useState, useEffect } from 'react';\nimport AllCourts from './AllCourts'\nimport Scheduler from './Scheduler'\nimport Error from './Error'\nimport {Switch, Route} from 'react-router-dom'\nimport Navbar from './Navbar'\nimport { useGoogleLogin, useGoogleLogout } from 'react-google-login'\nimport { GOOGLE_CLIENT_ID } from '../config'\nimport {getUserProfile} from '../helpers/userHelpers'\nimport { bookCourt, unbookCourt } from '../helpers/bookHelper'\n\n// Root component that handles routing for all components\nconst App = () => {\n  const [booked, setBooked] = useState(false)\n  const [isAuthenticated, setAuth] = useState(false)\n  const handleLoginSuccess = (data) => {\n    setAuth(true)\n    localStorage.setItem('token', data.wc.access_token)\n    localStorage.setItem('id', data.googleId)\n  }\n\n  const handleLoginFailure = data => {\n    setAuth(false)\n    localStorage.removeItem('token')\n    localStorage.removeItem('id')\n  }\n\n  const handleLogoutSuccess = data => {\n    setAuth(false)\n    localStorage.removeItem('token')\n    localStorage.removeItem('id')\n  }\n\n  const handleLogoutFailure = data => {\n    setAuth(false)\n    localStorage.removeItem('token')\n    localStorage.removeItem('id')\n  }\n\n  const { signIn, loaded } = useGoogleLogin({\n    clientId: GOOGLE_CLIENT_ID,\n    onSuccess: handleLoginSuccess,\n    onFailure: handleLoginFailure,\n    isSignedIn: true\n  })\n\n\n  const { signOut } = useGoogleLogout({\n    clientId: GOOGLE_CLIENT_ID,\n    onSuccess: handleLogoutSuccess,\n    onFailure: handleLogoutFailure\n  })\n\n  const getUser = () => {\n    getUserProfile().then(res => {\n      if(res.booking) {\n        setBooked(true)\n      }\n    })\n  }\n\n  useEffect(() => {\n    if(isAuthenticated) {\n      getUser()\n    }\n  }, [booked])\n\n  const book = async (data) => {\n    bookCourt(data)\n    .then(user => {\n      if(user.booking) {\n        setBooked(true)\n      }\n      else {\n        setBooked(false)\n      }\n    })\n  }\n\n  const unbook = async () => {\n    unbookCourt()\n    .then(user => {\n        if(!user.booking) {\n          setBooked(false)\n        }\n        else {\n          setBooked(true)\n        }\n    })\n}\n\n  return (\n    <main>\n      <Navbar signin={signIn} signout={signOut} />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path='/' component={() => <Scheduler booked={booked} book={book} unbook={unbook}/>} />\n          <Route component={Error} />\n        </Switch>\n      </div>\n    </main>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { useGoogleLogin, useGoogleLogout } from 'react-google-login'\nimport { GOOGLE_CLIENT_ID } from '../config'\n\nconst GoogleAuthContext = React.createContext()\n\nexport const GoogleAuthProvider = ({ children }) => {\n\n  const googleAuth = useGoogleLogin({\n    clientId: GOOGLE_CLIENT_ID,\n    isSignedIn: true\n  })\n  console.log(googleAuth)\n  return (\n    <GoogleAuthContext.Provider value={googleAuth}>\n      {children}\n    </GoogleAuthContext.Provider>\n  )\n}\n\nexport const useGoogleAuth = () => React.useContext(GoogleAuthContext)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport axios from 'axios'\nimport { Auth0Provider } from \"@auth0/auth0-react\"\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { GoogleAuthProvider } from './context/googleProvider'\nReactDOM.render(\n  <BrowserRouter>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}